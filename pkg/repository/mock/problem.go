// Code generated by MockGen. DO NOT EDIT.
// Source: problem.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	entity "github.com/ictsc/ictsc-rikka/pkg/entity"
)

// MockProblemRepository is a mock of ProblemRepository interface.
type MockProblemRepository struct {
	ctrl     *gomock.Controller
	recorder *MockProblemRepositoryMockRecorder
}

// MockProblemRepositoryMockRecorder is the mock recorder for MockProblemRepository.
type MockProblemRepositoryMockRecorder struct {
	mock *MockProblemRepository
}

// NewMockProblemRepository creates a new mock instance.
func NewMockProblemRepository(ctrl *gomock.Controller) *MockProblemRepository {
	mock := &MockProblemRepository{ctrl: ctrl}
	mock.recorder = &MockProblemRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProblemRepository) EXPECT() *MockProblemRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockProblemRepository) Create(problem *entity.Problem) (*entity.Problem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", problem)
	ret0, _ := ret[0].(*entity.Problem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockProblemRepositoryMockRecorder) Create(problem interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockProblemRepository)(nil).Create), problem)
}

// Delete mocks base method.
func (m *MockProblemRepository) Delete(problem *entity.Problem) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", problem)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockProblemRepositoryMockRecorder) Delete(problem interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockProblemRepository)(nil).Delete), problem)
}

// FindByCode mocks base method.
func (m *MockProblemRepository) FindByCode(code string) (*entity.Problem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByCode", code)
	ret0, _ := ret[0].(*entity.Problem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByCode indicates an expected call of FindByCode.
func (mr *MockProblemRepositoryMockRecorder) FindByCode(code interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByCode", reflect.TypeOf((*MockProblemRepository)(nil).FindByCode), code)
}

// FindByID mocks base method.
func (m *MockProblemRepository) FindByID(id uuid.UUID) (*entity.Problem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", id)
	ret0, _ := ret[0].(*entity.Problem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockProblemRepositoryMockRecorder) FindByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockProblemRepository)(nil).FindByID), id)
}

// GetAll mocks base method.
func (m *MockProblemRepository) GetAll() ([]*entity.Problem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]*entity.Problem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockProblemRepositoryMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockProblemRepository)(nil).GetAll))
}

// Update mocks base method.
func (m *MockProblemRepository) Update(problem *entity.Problem, skipUpdatedAt bool) (*entity.Problem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", problem, skipUpdatedAt)
	ret0, _ := ret[0].(*entity.Problem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockProblemRepositoryMockRecorder) Update(problem, skipUpdatedAt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockProblemRepository)(nil).Update), problem, skipUpdatedAt)
}
