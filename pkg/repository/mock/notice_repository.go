// Code generated by MockGen. DO NOT EDIT.
// Source: notice_repository.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	entity "github.com/ictsc/ictsc-rikka/pkg/entity"
)

// MockNoticeRepository is a mock of NoticeRepository interface.
type MockNoticeRepository struct {
	ctrl     *gomock.Controller
	recorder *MockNoticeRepositoryMockRecorder
}

// MockNoticeRepositoryMockRecorder is the mock recorder for MockNoticeRepository.
type MockNoticeRepositoryMockRecorder struct {
	mock *MockNoticeRepository
}

// NewMockNoticeRepository creates a new mock instance.
func NewMockNoticeRepository(ctrl *gomock.Controller) *MockNoticeRepository {
	mock := &MockNoticeRepository{ctrl: ctrl}
	mock.recorder = &MockNoticeRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNoticeRepository) EXPECT() *MockNoticeRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockNoticeRepository) Create(notice *entity.Notice) (*entity.Notice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", notice)
	ret0, _ := ret[0].(*entity.Notice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockNoticeRepositoryMockRecorder) Create(notice interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockNoticeRepository)(nil).Create), notice)
}

// FindByID mocks base method.
func (m *MockNoticeRepository) FindByID(id uuid.UUID) (*entity.Notice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", id)
	ret0, _ := ret[0].(*entity.Notice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockNoticeRepositoryMockRecorder) FindByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockNoticeRepository)(nil).FindByID), id)
}

// GetAll mocks base method.
func (m *MockNoticeRepository) GetAll() ([]*entity.Notice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]*entity.Notice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockNoticeRepositoryMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockNoticeRepository)(nil).GetAll))
}

// Update mocks base method.
func (m *MockNoticeRepository) Update(notice *entity.Notice) (*entity.Notice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", notice)
	ret0, _ := ret[0].(*entity.Notice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockNoticeRepositoryMockRecorder) Update(notice interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockNoticeRepository)(nil).Update), notice)
}
